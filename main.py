from data.imports import *

load_dotenv()

bot = Bot(os.getenv('TG_TOKEN'))
dp = Dispatcher(bot, storage=MemoryStorage())

decrypted_key = b""
decrypted_secret = b""


# –î–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def next_month(today):
    delta = timedelta(days=30)
    return today + delta


# –£—Å–ø–µ—â–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_startup(_):
    print("–Ø –±—ã–ª –∑–∞–ø—É—â–µ–Ω")


# –•–µ–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç–∞
@dp.message_handler(commands=["start"])
async def start_func(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.username}! –í–°–¢–ê–í–ò–¢–¨ –í–°–¢–£–ü–õ–ï–ù–ò–ï. "
                                f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –Ω–∞–∂–∞–≤  "
                                f"–Ω–∞ –∫–Ω–æ–ø–∫—É \"–û–ø–∏—Å–∞–Ω–∏–µ\"",
                           reply_markup=kb_free)
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
    conn = sqlite3.connect('db/database.db')
    cursor = conn.cursor()
    info = cursor.execute('SELECT * FROM users WHERE user_id=?;', (message.from_user.id, )).fetchone()
    # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –±–¥
    if info is None:
        cursor.execute(f"""INSERT INTO users VALUES ('{message.from_user.id}', '0', '0', 'free', '', '', '');""")
        conn.commit()
    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤ –±–¥
    else:
        cursor.execute("SELECT status, api_key FROM users WHERE user_id = ?", (message.from_user.id,))
        result = cursor.fetchone()
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
        if result[0] == "free":
            await bot.send_message(chat_id=message.from_user.id,
                                   text="–ú—ã –Ω–∞—à–ª–∏ –≤–∞—à—É —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                                   reply_markup=kb_free)
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–Ω—ã–π
        elif result[0] == "paid":
            if result[1] == "":
                await bot.send_message(chat_id=message.from_user.id,
                                       text="–ú—ã –Ω–∞—à–ª–∏ –≤–∞—à—É —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                                       reply_markup=kb_unreg)
            else:
                await bot.send_message(chat_id=message.from_user.id,
                                       text="–ú—ã –Ω–∞—à–ª–∏ –≤–∞—à—É —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                                       reply_markup=kb_reg)

    await message.delete()


# –•–µ–Ω–¥–ª–µ—Ä –û–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(Text(equals="–û–ø–∏—Å–∞–Ω–∏–µ"))
async def descr_func(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=DESCR)


# –•–µ–Ω–¥–ª–µ—Ä –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
@dp.message_handler(Text(equals="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"))
async def descr_func(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=INSTRUCT,
                           parse_mode="HTML",
                           reply_markup=kb_instruct)


# –•–µ–Ω–¥–ª–µ—Ä –ü–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message_handler(Text(equals="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"))
async def buy(message: types.Message):
    if (PAYMENTS_TOKEN:=os.getenv('PAYMENTS_TOKEN')).split(":")[1] == "TEST":
        await bot.send_message(message.chat.id,
                               "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂")
    await bot.send_invoice(message.chat.id,
                           title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Taber Bot",
                           description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 1 –º–µ—Å—è—Ü",
                           provider_token=PAYMENTS_TOKEN,
                           currency="rub",
                           photo_url="https://i.postimg.cc/3RXYBqbV/kandinsky-download-1681585603018.png",
                           photo_width=400,
                           photo_height=300,
                           is_flexible=False,
                           prices=[PRICE],
                           start_parameter="one-month-subscription",
                           payload="tesy-invoice-payload")


@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


# –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successfull_payment(message: types.Message):
    print("Success")
    payment_info = message.successful_payment.to_python()
    tranzaktion = ""
    for k, v in payment_info.items():
        if k == "telegram_payment_charge_id":
            tranzaktion = v
        print(f"{k} = {v}")
    print('\n')
    await bot.send_message(message.chat.id,
                           f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É <b>{message.successful_payment.total_amount // 100} "
                           f"{message.successful_payment.currency}</b> –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ. "
                           f"–ù–æ–º–µ—Ä –≤–∞—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tranzaktion}. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!",
                           parse_mode="HTML",
                           reply_markup=kb_unreg
                           )

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    conn = sqlite3.connect('db/database.db')
    cursor = conn.cursor()
    cursor.execute(f"""Update users set status = "paid", subscribe_start = "{date.today()}", 
                       subscribe_finish = "{next_month(date.today())}" 
                       where user_id = {message.from_user.id}""")
    conn.commit()
    cursor.close()


# –•–µ–Ω–¥–ª–µ—Ä –í–æ–∑—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é
@dp.message_handler(Text(equals="–í –º–µ–Ω—é"))
async def menu_func(message: types.Message):
    conn = sqlite3.connect('db/database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT status, api_key FROM users WHERE user_id = ?", (message.from_user.id,))
    result = cursor.fetchone()
    if result[0] == "free":
        await bot.send_message(chat_id=message.from_user.id,
                               text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—éü¶©",
                               parse_mode="HTML",
                               reply_markup=kb_free)
    elif result[0] == "paid" and result[1] != "":
        await bot.send_message(chat_id=message.from_user.id,
                               text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—éü¶©",
                               parse_mode="HTML",
                               reply_markup=kb_reg)
    elif result[0] == "paid" and result[1] == "":
        await bot.send_message(chat_id=message.from_user.id,
                               text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—éü¶©",
                               parse_mode="HTML",
                               reply_markup=kb_unreg)


# –•–µ–Ω–¥–ª–µ—Ä –ü—Ä–µ–¥–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–∏—è
@dp.message_handler(Text(equals="‚ùå–ü—Ä–µ–¥–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–∏—è‚ùå"))
async def predostr_func(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=PREDOSTR,
                           parse_mode="HTML")


# –•–µ–Ω–¥–ª–µ—Ä –ü–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–æ–º
@dp.message_handler(Text(equals="–ö–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?"))
async def instruct_func(message: types.Message):
    await bot.send_video(chat_id=message.from_user.id,
                         video=open("imgs/CHANGE_TO_INSTRUCTION.mp4", "rb"),
                         caption="–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")


# !!!–ü–õ–ê–¢–ù–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ!!!
# –•–µ–Ω–¥–ª–µ—Ä –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@dp.message_handler(Text(equals="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"))
async def auth_func(message: types.Message):
    conn = sqlite3.connect('db/database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT status FROM users WHERE user_id = ?", (message.from_user.id,))
    result = cursor.fetchone()
    if result[0] == "paid":
        await bot.send_message(chat_id=message.from_user.id,
                               text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>api_key</b>: ",
                               parse_mode="HTML")
        await Auth.api_key.set()
    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text="–í—ã –µ—â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É",
                               parse_mode="HTML")


# –•–µ–Ω–¥–ª–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è Api-key
@dp.message_handler(state=Auth.api_key)
async def set_api_key(message: types.Message, state: FSMContext):
    async with state.proxy() as proxy:
        proxy['api_key'] = message.text
        await Auth.api_secret.set()
    await bot.send_message(chat_id=message.from_user.id,
                           text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>api_secret</b>: ",
                           parse_mode="HTML")


# –•–µ–Ω–¥–ª–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è Api-secret
@dp.message_handler(state=Auth.api_secret)
async def set_api_secret(message: types.Message, state: FSMContext):
    async with state.proxy() as proxy:
        proxy['api_secret'] = message.text
        await state.finish()
    s = await state.get_data()
    try:
        test = HTTP(
            api_key=s.get("api_key"),
            api_secret=s.get("api_secret"),
        )
        test.get_account_info()

        # –®–∏—Ñ—Ä–æ–≤–∫–∞ –∫–ª—é—á–µ–π
        cipher_key = Fernet.generate_key()
        cipher = Fernet(cipher_key)
        api_key = s.get("api_key").encode("utf-8")
        api_secret = s.get("api_secret").encode("utf-8")
        encrypted_key = cipher.encrypt(api_key)
        encrypted_secret = cipher.encrypt(api_secret)
        global decrypted_key
        decrypted_key = cipher.decrypt(encrypted_key)
        global decrypted_secret
        decrypted_secret = cipher.decrypt(encrypted_secret)

        # –ó–∞–ø–∏—Å—å –î–∞–Ω–Ω—ã—Ö –≤ –±–¥
        conn = sqlite3.connect('db/database.db')
        cursor = conn.cursor()
        cursor.execute(f"""UPDATE users SET api_secret = "{encrypted_key}", api_key = "{encrypted_secret}"
                               WHERE user_id = {message.from_user.id}""")
        conn.commit()
        cursor.close()

        await bot.send_message(message.chat.id, '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω', reply_markup=kb_reg)

    except exceptions.InvalidRequestError as e:
        await bot.send_message(message.chat.id, 'Api key –∏–ª–∏ Api secret —É–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', reply_markup=kb_unreg)
        print(e)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
def api_stock(a):
    conn = sqlite3.connect('db/database.db')
    cursor = conn.cursor()
    return cursor.execute('SELECT api_secret FROM users WHERE user_id=?;', (a,)).fetchone()


# –•–µ–Ω–¥–ª–µ—Ä –ü—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(Text(equals="–ü—Ä–æ—Ñ–∏–ª—å"))
async def profile_func(message: types.Message):
    info = api_stock(message.from_user.id)
    if info is not None:
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb_profile)


# –•–µ–Ω–¥–ª–µ—Ä –ë–∞–ª–∞–Ω—Å–∞
@dp.message_handler(Text(equals="–ë–∞–ª–∞–Ω—Å"))
async def balance_func(message: types.Message):
    info = api_stock(message.from_user.id)
    if info is not None:
        conn = sqlite3.connect('db/database.db')
        cursor = conn.cursor()
        data = cursor.execute('SELECT api_secret, api_key FROM users WHERE user_id=?;', (message.from_user.id,)).fetchone()
        session = HTTP(
            api_key=decrypted_key.decode('utf-8'),
            api_secret=decrypted_secret.decode('utf-8')
        )
        
        wallet_balance_data = session.get_wallet_balance(accountType="UNIFIED")["result"]["list"][0]
        coins = wallet_balance_data["coin"]
        total_balance = wallet_balance_data["totalEquity"]
        total_balance_msg = ""

        for obj in coins:
            total_balance_msg += f"<b>{obj['coin']}</b>: <b>{obj['equity']}</b>\n"

        total_balance_msg += f"<b>–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance}</b> $"
        await bot.send_message(chat_id=message.from_user.id,
                               text=total_balance_msg,
                               parse_mode="HTML")


# –•–µ–Ω–¥–ª–µ—Ä —Ö—É–π–Ω–∏
@dp.message_handler()
async def unknown_func(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text="–ú—ã –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–ª–∏ –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
