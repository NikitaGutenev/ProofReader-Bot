from handlers.A_head_of_handlers import *


# –•–µ–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç–∞
@dp.message_handler(commands=["start"])
async def start_func(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, {message.from_user.username}! –í –Ω–∞—à–µ–º –±–æ—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Ç–µ–º–∏ –∂–µ –æ—Ä–¥–µ—Ä–∞–º–∏, —á—Ç–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–π–¥–µ—Ä—ã –Ω–∞ Bybit!. "
                                f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –Ω–∞–∂–∞–≤  "
                                f"–Ω–∞ –∫–Ω–æ–ø–∫—É \"–û–ø–∏—Å–∞–Ω–∏–µ\"",
                           reply_markup=kb_free)
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
    conn = sqlite3.connect('db/database.db')
    cursor = conn.cursor()
    info = cursor.execute('SELECT * FROM users WHERE user_id=?;', (message.from_user.id, )).fetchone()
    await db_validate(cursor, conn, message, info)
    await message.delete()



# –•–µ–Ω–¥–ª–µ—Ä –û–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(Text(equals="–û–ø–∏—Å–∞–Ω–∏–µ"))
async def descr_func(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=DESCR, parse_mode="HTML")



# –•–µ–Ω–¥–ª–µ—Ä –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
@dp.message_handler(Text(equals="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"))
async def descr_func(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=INSTRUCT,
                           parse_mode="HTML",
                           reply_markup=kb_instruct)




# –•–µ–Ω–¥–ª–µ—Ä –ü–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message_handler(Text(equals="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"))
async def buy(message: types.Message):
    if (PAYMENTS_TOKEN:=os.getenv('PAYMENTS_TOKEN')).split(":")[1] == "TEST":
        await bot.send_message(message.chat.id,
                               "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂")
    await bot.send_invoice(message.chat.id,
                           title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Taber Bot",
                           description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 1 –º–µ—Å—è—Ü",
                           provider_token=PAYMENTS_TOKEN,
                           currency="rub",
                           photo_url="https://i.postimg.cc/3RXYBqbV/kandinsky-download-1681585603018.png",
                           photo–±–∞o_height=300,
                           is_flexible=False,
                           prices=[PRICE],
                           start_parameter="one-month-subscription",
                           payload="tesy-invoice-payload")



@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)



# –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successfull_payment(message: types.Message):
    print("Success")
    payment_info = message.successful_payment.to_python()
    tranzaktion = ""
    for k, v in payment_info.items():
        if k == "telegram_payment_charge_id":
            tranzaktion = v
        print(f"{k} = {v}")
    print('\n')
    await bot.send_message(message.chat.id,
                           f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É <b>{message.successful_payment.total_amount // 100} "
                           f"{message.successful_payment.currency}</b> –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ. "
                           f"–ù–æ–º–µ—Ä –≤–∞—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tranzaktion}. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!",
                           parse_mode="HTML",
                           reply_markup=kb_unreg
                           )
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    conn = sqlite3.connect('db/database.db')
    cursor = conn.cursor()
    cursor.execute(f"""Update users set status = "paid", subscribe_start = "{date.today()}", 
                       subscribe_finish = "{next_month(date.today())}" 
                       where user_id = {message.from_user.id}""")
    conn.commit()
    cursor.close()



# –•–µ–Ω–¥–ª–µ—Ä –í–æ–∑—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é
@dp.message_handler(Text(equals="–í –º–µ–Ω—é"))
async def menu_func(message: types.Message):
    conn = sqlite3.connect('db/database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT status, api_key FROM users WHERE user_id = ?", (message.from_user.id,))
    result = cursor.fetchone()
    if result[0] == "free":
        await bot.send_message(chat_id=message.from_user.id,
                               text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—éü¶©",
                               parse_mode="HTML",
                               reply_markup=kb_free)
    elif result[0] == "paid" and result[1] != "":
        await bot.send_message(chat_id=message.from_user.id,
                               text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—éü¶©",
                               parse_mode="HTML",
                               reply_markup=kb_reg)
    elif result[0] == "paid" and result[1] == "":
        await bot.send_message(chat_id=message.from_user.id,
                               text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—éü¶©",
                               parse_mode="HTML",
                               reply_markup=kb_unreg)



# –•–µ–Ω–¥–ª–µ—Ä –ü—Ä–µ–¥–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–∏—è
@dp.message_handler(Text(equals="‚ùå–ü—Ä–µ–¥–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–∏—è‚ùå"))
async def predostr_func(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=PREDOSTR,
                           parse_mode="HTML")



# –•–µ–Ω–¥–ª–µ—Ä –ü–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–æ–º
@dp.message_handler(Text(equals="–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å API –∫–ª—é—á?"))
async def instruct_func(message: types.Message):
    await bot.send_video(chat_id=message.from_user.id,
                         video=open("imgs/instruct.mp4", "rb"),
                         caption="–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")