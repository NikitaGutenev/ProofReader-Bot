import time

from handlers.D_paid_function_handlers import *
from callbacks.trader_callbacks import *


def tracking(api_key, api_secret):
    a = 0
    ws = WebSocket(
        testnet=False,
        channel_type="private",
        api_key=api_key,
        api_secret=api_secret,
    )
    def handle_message(message):
        print(message)

    ws.order_stream(callback=handle_message)
    # –í–æ—Ç –∑–¥–µ—Å—å –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤—ã–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ —Ö–∑ –∫–∞–∫ –∏ –Ω–∞–ø–∏—Å–∞—Ç—å ws.exit()
    while True:
        @dp.message_handler(Text(equals='–í—ã–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ'))
        async def asd(message: types.Message):
            ws.exit()
            await bot.send_message(chat_id=message.from_user.id,
                                   text="–í–°–ï")
        break



@dp.message_handler(Text(equals='–ö–ª—é—á–∏'))
async def keys(message: types.Message):
    if trader_validate(message.from_user.id):
        await bot.send_message(chat_id=message.from_user.id,
                               text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                               reply_markup=kb_keys)
    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text="–ú—ã –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–ª–∏ –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")


@dp.message_handler(Text(equals='–í–µ—Ä–Ω—É—Ç—å—Å—è'))
async def back(message: types.Message):
    if trader_validate(message.from_user.id):
        await bot.send_message(chat_id=message.from_user.id,
                               text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é",
                               reply_markup=kb_trader)
    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text="–ú—ã –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–ª–∏ –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")


@dp.message_handler(Text(equals='–°–æ–∑–¥–∞—Ç—å –∫–ª—é—á'))
async def new_key(message: types.Message):
    if trader_validate(message.from_user.id):
        letters = string.ascii_lowercase
        key = ''.join(random.choice(letters) for i in range(8))

        with open('cache/keys.txt', 'w') as file:
            file.write(key)

        conn, cursor = db_connect()
        cursor.execute(f"INSERT INTO trader_keys (trader_id, key) VALUES ('{message.from_user.id}', '{key}');")
        conn.commit()
        cursor.close()

        await bot.send_message(chat_id=message.from_user.id,
                               text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π.",
                               reply_markup=ikb_quantity)
    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text="–ú—ã –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–ª–∏ –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")


@dp.message_handler(Text(equals='–£–¥–∞–ª–∏—Ç—å –∫–ª—é—á'))
async def new_key(message: types.Message):
    if trader_validate(message.from_user.id):
        await bot.send_message(chat_id=message.from_user.id,
                               text="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å")
        await Key_Delete.key.set()
    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text="–ú—ã –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–ª–∏ –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")


@dp.message_handler(Text(equals='–í—ã–≤–æ–¥ –≤—Å–µ—Ö –∫–ª—é—á–µ–π'))
async def view_keys(message: types.Message):
    if trader_validate(message.from_user.id):
        conn, cursor = db_connect()
        text = "üóù <b>–ö–õ–Æ–ß</b> | <em>–î–ê–¢–ê</em> | <u>–ö–û–õ-–í–û –ê–ö–¢–ò–í–ê–¶–ò–ô</u> \n\n"
        data = cursor.execute(
            f"SELECT key, duration, quantity, quantity_tek FROM trader_keys WHERE trader_id = {message.from_user.id}").fetchall()
        for obj in data:
            text += f"<b>{data.index(obj) + 1}. {obj[0]}</b> | <em>{obj[1]}</em> | <u>{obj[3]}/{obj[2]}</u>\n"
        await bot.send_message(chat_id=message.from_user.id,
                               text=text,
                               parse_mode="HTML")
    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text="–ú—ã –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–ª–∏ –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")


@dp.message_handler(Text(equals='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü—Ä–æ—Ñ–∏–ª—è'))
async def prof_stat(message: types.Message):
    if trader_validate(message.from_user.id):
        await bot.send_video(chat_id=message.from_user.id,
                             video='https://c.mql5.com/1/78/open-uri20150119-12-2b4861__1.gif',
                             caption='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü—Ä–æ—Ñ–∏–ª—è',
                             reply_markup=ikb_trader_stat)
    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text="–ú—ã –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–ª–∏ –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")


@dp.message_handler(Text(equals='–ü–æ–º–æ—â—å'))
async def trader_help(message: types.Message):
    if trader_validate(message.from_user.id):
        await bot.send_message(chat_id=message.from_user.id,
                               text=TRADER_HELP,
                               parse_mode='html',
                               reply_markup=kb_trader)
    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text="–ú—ã –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–ª–∏ –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")


@dp.message_handler(Text(equals='–í–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ'))
async def trader_help(message: types.Message):
    if trader_validate(message.from_user.id):
        with open("cache/flag.txt", "r") as file:
            flag = file.readline()
        conn, cursor = db_connect()
        data = cursor.execute(
            f"SELECT api_key, api_secret FROM traders WHERE trader_id={message.from_user.id}").fetchone()
        key, secret = decrypt_api(data[0]), decrypt_api(data[1])

        if flag == "disable":
            with open("cache/flag.txt", "w") as file:
                file.write("enable")
            await bot.send_message(chat_id=message.from_user.id,
                                   text="–ù–∞—á–∞–ª–æ—Å—å",
                                   reply_markup=kb_trader2)
            tracking(api_key=key, api_secret=secret)
        else:
            with open("cache/flag.txt", "w") as file:
                file.write("disable")
            await bot.send_message(chat_id=message.from_user.id,
                                   text="–í—ã–∫–ª—é—á–∏–ª",
                                   reply_markup=kb_trader)

    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text="–ú—ã –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–ª–∏ –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
