from handlers.A_head_of_handlers import *


@dp.callback_query_handler(lambda e: e.data[0] == 'E')
async def trader_callbacks(callback: types.CallbackQuery,):
    callback.data = callback.data[1:]
    match callback.data:
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –∫–æ–ª–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
        case 'infinity':
            conn, cursor = db_connect()
            with open('cache/keys.txt', 'r') as file:
                key = file.readline()
            cursor.execute(f"UPDATE trader_keys SET quantity = 999999 WHERE key = '{key}';")
            conn.commit()
            cursor.close()
            await bot.send_message(chat_id=callback.from_user.id,
                                   text="–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É, –¥–æ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥-–º–º-–≥–≥–≥–≥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '<b>–ë–µ—Å—Å—Ä–æ—á–Ω–æ</b>', —á—Ç–æ–±—ã –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–ª –≤—Å–µ–≥–¥–∞.",
                                   parse_mode="HTML")
            await Key_Duration.date.set()
        case 'personal':
            await bot.send_message(chat_id=callback.from_user.id,
                                   text="–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π. <b>–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –±—É–¥–µ—Ç –∏—Å—á–µ—Ä–ø–∞–Ω–æ - –∫–ª—é—á —É–¥–∞–ª–∏—Ç—Å—è</b>.",
                                   parse_mode="HTML")
            await Activation_Quantity.quantity.set()

        case 'people':
            conn, cursor = db_connect()
            count = cursor.execute(f'SELECT count(*) FROM users WHERE subscriptions LIKE "{"%"+str(callback.from_user.id)+"%"}"').fetchone()[0]
            await bot.send_message(chat_id=callback.from_user.id,
                                   text=f'–ö–æ–ª-–≤–æ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {count}')
        case 'OpenOrders':
            conn, cursor = db_connect()
            orders = cursor.execute(f'SELECT order_id, tp_order_id, sl_order_id, trade_pair, take_profit, stop_loss, open_price, qty FROM orders WHERE trader_id = {callback.from_user.id} AND status = "open"').fetchall()
            res = ''
            kb_trader = true_kb(callback.from_user.id)
            for item in orders:
                res+=f"""
–ë–∞–∑–æ–≤—ã–π –æ—Ä–¥–µ—Ä: {item[0]}
TP –æ—Ä–¥–µ—Ä: {item[1]}
SL –æ—Ä–¥–µ—Ä: {item[2]}
–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: {item[3]}
–£—Ä–æ–≤–µ–Ω—å TP: {item[4]}
–£—Ä–æ–≤–µ–Ω—å SL: {item[5]}
–£—Ä–æ–≤–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–∑–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {item[6]}
–ö–æ–ª-–≤–æ –º–æ–Ω–µ—Ç: {item[7]}
----------------------
"""
            if res != '':
                await bot.send_message(chat_id=callback.from_user.id,
                                    text=res,
                                    reply_markup=kb_trader)
            else:
                await bot.send_message(chat_id=callback.from_user.id,
                                    text='–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤,–∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ—Ç—Å–ª–µ–∂–µ–Ω—ã',
                                    reply_markup=kb_trader)
            return
        
        case 'HistoryOrders':
            kb_trader = true_kb(callback.from_user.id)
            conn, cursor = db_connect()
            orders = cursor.execute(f'SELECT * FROM orders WHERE trader_id = {callback.from_user.id} AND status = "close"').fetchall()
            if len(orders) > 10:
                orders = orders[-11:]
            res = ''
            for item in orders:
                res+=f"""
–ë–∞–∑–æ–≤—ã–π –æ—Ä–¥–µ—Ä: {item[0]}
TP –æ—Ä–¥–µ—Ä: {item[1]}
SL –æ—Ä–¥–µ—Ä: {item[2]}
–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: {item[3]}
–£—Ä–æ–≤–µ–Ω—å TP: {item[4]}
–£—Ä–æ–≤–µ–Ω—å SL: {item[5]}
–£—Ä–æ–≤–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–∑–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {item[9]}
–£—Ä–æ–≤–µ–Ω—å –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Ä–¥–µ—Ä–∞: {item[10]}
–û—Ä–¥–µ—Ä –∑–∞–∫—Ä—ã—Ç–∏—è: {item[11]}
–ü—Ä–æ—Ñ–∏—Ç –æ—Ç —Å–¥–µ–ª–∫–∏: {item[12]}
–ö–æ–ª-–≤–æ –º–æ–Ω–µ—Ç: {item[13]}
----------------------
"""
            if res != '':
                await bot.send_message(chat_id=callback.from_user.id,
                                    text=res,
                                    reply_markup=kb_trader)
            else:
                await bot.send_message(chat_id=callback.from_user.id,
                                    text='–£ –≤–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ—Ç—Å–ª–µ–∂–µ–Ω—ã.',
                                    reply_markup=kb_trader)
            return

        case 'pushOrder':
            kb_trader = true_kb(callback.from_user.id, mode = True)
            global stream_websockets
            tmp = stream_websockets[f'stream_{callback.from_user.id}'][1]
            tmp.create_order_in_object(tmp.ord, tmp.value, mode = True)
            await callback.message.edit_text(text='–£ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–∞–º–∏ –æ—Ä–¥–µ—Ä –Ω–∞ –¥–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ. –í–µ—Ä–æ—è—Ç–Ω–æ, –í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–∫—É–ø–∏—Ç—å –∏/–∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä–∞. –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º –¢–û–õ–¨–ö–û –ß–¢–û –°–û–ó–î–ê–ù–ù–´–ô –í–ê–ú–ò –æ—Ä–¥–µ—Ä, –∏–ª–∏ –Ω–µ –±—É–¥–µ—Ç–µ?\n\n\n –í–´ –û–¢–ü–†–ê–í–ò–õ–ò –û–†–î–ï–†‚úÖ')
            
            await bot.send_message(chat_id=callback.from_user.id, 
                                   text='–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ OFF‚ùå',
                                   reply_markup=kb_trader)

        case 'cancelOrder':
            kb_trader = true_kb(callback.from_user.id, mode=True)
            await callback.message.edit_text(text='–£ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–∞–º–∏ –æ—Ä–¥–µ—Ä –Ω–∞ –¥–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ. –í–µ—Ä–æ—è—Ç–Ω–æ, –í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–∫—É–ø–∏—Ç—å –∏/–∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä–∞. –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º –¢–û–õ–¨–ö–û –ß–¢–û –°–û–ó–î–ê–ù–ù–´–ô –í–ê–ú–ò –æ—Ä–¥–µ—Ä, –∏–ª–∏ –Ω–µ –±—É–¥–µ—Ç–µ?\n\n\n –í–´ –û–¢–ú–ï–ù–ò–õ–ò –û–¢–ü–†–ê–í–ö–£ –û–†–î–ï–†–êüí•')
            await bot.send_message(chat_id=callback.from_user.id, text='–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ OFF‚ùå', reply_markup=kb_trader)


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π
@dp.message_handler(state=Key_Delete.key)
async def key_delete(message: types.Message, state: FSMContext):
    async with state.proxy() as proxy:
        proxy['key'] = message.text
    s = await state.get_data()
    key = s["key"]
    conn, cursor = db_connect()
    valid = cursor.execute(f"SELECT trader_id FROM trader_keys WHERE key = '{key}'").fetchone()
    kb_trader = true_kb(message.from_user.id)
    if valid is not None:
        cursor.execute(f"DELETE FROM trader_keys WHERE key = '{key}'")
        conn.commit()
        cursor.close()
        await bot.send_message(chat_id=message.from_user.id,
                               text="–ö–ª—é—á –±—ã–ª —É–¥–∞–ª–µ–Ω. –õ—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –µ–≥–æ, –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–≥—É—Ç –æ—Ç—Å–ª–µ–¥–∏–≤–∞—Ç—å –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è",
                               reply_markup=kb_trader)
    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text="–¢–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
                               reply_markup=kb_trader)
    await state.reset_state()


# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
@dp.message_handler(state=Activation_Quantity.quantity)
async def activation_quantity(message: types.Message, state: FSMContext):
    async with state.proxy() as proxy:
        proxy['quantity'] = message.text
    s = await state.get_data()
    quantity = s["quantity"]
    conn, cursor = db_connect()
    kb_trader = true_kb(message.from_user.id)
    with open('cache/keys.txt', 'r') as file:
        key = file.readline()
    try:
        cursor.execute(f"UPDATE trader_keys SET quantity = {int(quantity)} WHERE key = '{key}';")
        conn.commit()
        cursor.close()
        await bot.send_message(chat_id=message.from_user.id,
                               text="–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É, –¥–æ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥-–º–º-–≥–≥–≥–≥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '<b>–ë–µ—Å—Å—Ä–æ—á–Ω–æ</b>', —á—Ç–æ–±—ã –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–ª –≤—Å–µ–≥–¥–∞.",
                               parse_mode="HTML")
        await state.reset_state()
        await Key_Duration.date.set()
    except ValueError:
        await bot.send_message(chat_id=message.from_user.id,
                               text="–í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ –∫–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
                               reply_markup=kb_trader)
        cursor.execute(f"DELETE FROM trader_keys WHERE key = '{key}'")
        conn.commit()
        cursor.close()
        await state.reset_state()


# –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏ –∫–ª—é—á–∞
@dp.message_handler(state=Key_Duration.date)
async def key_duration(message: types.Message, state: FSMContext):
    async with state.proxy() as proxy:
        proxy['date'] = message.text
        await state.finish()
    s = await state.get_data()
    kb_trader = true_kb(message.from_user.id)
    date = s["date"]
    conn, cursor = db_connect()
    with open('cache/keys.txt', 'r') as file:
        key = file.readline()
    try:
        if date.title() != "–ë–µ—Å—Å—Ä–æ—á–Ω–æ":
            a = datetime.strptime(date, '%d-%m-%Y').date()
            if a >= datetime.now().date():
                cursor.execute(f"UPDATE trader_keys SET duration = '{date}' WHERE key = '{key}';")
                await bot.send_message(chat_id=message.from_user.id,
                                       text=f"–í–∞—à –∫–ª—é—á: <b>{key}</b> ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–º–æ–≥–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è.",
                                       parse_mode="HTML",
                                       reply_markup=kb_trader)
            else:
                cursor.execute(f"DELETE FROM trader_keys WHERE key = '{key}'")
                await bot.send_message(chat_id=message.from_user.id,
                                       text=f"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
                                       parse_mode="HTML",
                                       reply_markup=kb_trader)
        else:
            cursor.execute(f"UPDATE trader_keys SET duration = '{date.title()}' WHERE key = '{key}';")
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–í–∞—à –∫–ª—é—á: <b>{key}</b> ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–º–æ–≥–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è.",
                                   parse_mode="HTML",
                                   reply_markup=kb_trader)
        conn.commit()
        cursor.close()
        await state.reset_state()

    except ValueError:
        await bot.send_message(chat_id=message.from_user.id,
                               text="–í—ã –≤–≤–µ–ª–∏ –¥–∞—Ç—É –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
                               parse_mode="HTML",
                               reply_markup=kb_trader)
        cursor.execute(f"DELETE FROM trader_keys WHERE key = '{key}'")
        conn.commit()
        cursor.close()
        await state.reset_state()


